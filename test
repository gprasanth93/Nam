const supervisorConnection = new Proxy({}, {
    set: (target, property, value) => {
        console.log(`set ${property} to ${util.inspect(value, { depth: null })}`);
        
        let shouldEmit = false;

        // Ensure the property exists
        if (!target[property]) {
            target[property] = {};
            shouldEmit = true; // Emit when a new entry is created
        }

        // Replace dbState if it exists in value
        if (value.dbState) {
            const isDbStateChanged = JSON.stringify(target[property].dbState) !== JSON.stringify(value.dbState);
            target[property].dbState = value.dbState;
            if (isDbStateChanged) shouldEmit = true;
        }

        // Replace kvmState if it exists in value
        if (value.kvmState) {
            const isKvmStateChanged = JSON.stringify(target[property].kvmState) !== JSON.stringify(value.kvmState);
            target[property].kvmState = value.kvmState;
            if (isKvmStateChanged) shouldEmit = true;
        }

        if (shouldEmit) {
            supervisorEmitter.emit('update', { [property]: target[property] });
        }

        console.log(`supervisorConnection ${util.inspect(supervisorConnection, { depth: null })}`);
        
        return true;
    },

    get: (target, property) => {
        return target[property];
    }
});