const express = require('express');
const { Pool } = require('pg');
const { EventEmitter } = require('events');

const app = express();
const port = 3000;

const pool = new Pool({
  user: 'your_db_user',
  host: 'your_db_host',
  database: 'your_db_name',
  password: 'your_db_password',
  port: 5432, // default PostgreSQL port
});

const eventEmitter = new EventEmitter();
const eventMap = {};

// Connect to the PostgreSQL database
pool.connect((err, client, release) => {
  if (err) {
    console.error('Error acquiring client', err.stack);
    return;
  }
  client.on('notification', (msg) => {
    const payload = JSON.parse(msg.payload);
    if (eventMap[payload.hostname]) {
      eventEmitter.emit(payload.hostname, payload);
    }
  });
  client.query('LISTEN new_insert');
  release();
});

// Middleware to handle SSE connections
app.get('/stream/:hostname', (req, res) => {
  const hostname = req.params.hostname;
  
  if (!['HRX', 'HTX', 'GBC'].includes(hostname)) {
    return res.status(400).send('Invalid hostname');
  }

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  const onData = (data) => {
    res.write(`data: ${JSON.stringify(data)}\n\n`);
  };

  eventEmitter.on(hostname, onData);

  // Stop the SSE stream after 5 minutes
  const timeout = setTimeout(() => {
    eventEmitter.removeListener(hostname, onData);
    res.end();
  }, 5 * 60 * 1000);

  req.on('close', () => {
    clearTimeout(timeout);
    eventEmitter.removeListener(hostname, onData);
    res.end();
  });
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});



CREATE OR REPLACE FUNCTION notify_new_insert() RETURNS TRIGGER AS $$
DECLARE
  payload JSON;
BEGIN
  payload = json_build_object(
    'id', NEW.id,
    'hostname', NEW.hostname,
    'data', NEW.data
  );
  PERFORM pg_notify('new_insert', payload::text);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER new_insert_trigger
AFTER INSERT ON your_table
FOR EACH ROW
EXECUTE PROCEDURE notify_new_insert();
