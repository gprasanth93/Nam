const { exec } = require('child_process');
const { Client } = require('pg');
const fs = require('fs');

const ARCHIVE_DIR = '/var/lib/postgresql/wal_archive'; // Change as needed
const PG_ARCHIVECLEANUP = '/usr/lib/postgresql/14/bin/pg_archivecleanup'; // Adjust path
const LOG_FILE = '/var/log/postgres_archive_cleanup.log';

// PostgreSQL connection
const pgClient = new Client({
  user: 'postgres',
  database: 'postgres', // Use any valid DB name
});

(async () => {
  try {
    await pgClient.connect();

    // Step 1: Get minimum flush_lsn
    const lsnResult = await pgClient.query(`
      SELECT pg_walfile_name(MIN(flush_lsn)) AS wal_file
      FROM pg_stat_replication;
    `);

    const walFile = lsnResult.rows[0].wal_file;

    if (!walFile) {
      log(`No replication info found. Cleanup skipped.`);
      return;
    }

    log(`Cleaning WALs older than ${walFile}`);

    // Step 2: Execute pg_archivecleanup
    const cmd = `${PG_ARCHIVECLEANUP} ${ARCHIVE_DIR} ${walFile}`;
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        log(`pg_archivecleanup error: ${error.message}`);
        return;
      }
      if (stderr) log(`stderr: ${stderr}`);
      if (stdout) log(stdout.trim());
    });
  } catch (err) {
    log(`Script error: ${err.message}`);
  } finally {
    await pgClient.end();
  }
})();

function log(message) {
  const timestamp = new Date().toISOString();
  fs.appendFileSync(LOG_FILE, `${timestamp} - ${message}\n`);
  console.log(`${timestamp} - ${message}`);
}