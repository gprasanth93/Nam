WITH version_check AS (
    SELECT setting::int AS pg_version
    FROM pg_settings 
    WHERE name = 'server_version_num'
),
column_check AS (
    SELECT 
        COUNT(*) > 0 AS has_procreated
    FROM pg_attribute 
    WHERE attrelid = 'pg_proc'::regclass 
    AND attname IN ('procreated', 'promodified')
),
functions_procedures AS (
    SELECT 
        p.proname::TEXT AS object_name,  -- Function or Procedure Name
        n.nspname::TEXT AS schema_name,  -- Schema Name
        pg_catalog.pg_get_function_result(p.oid)::TEXT AS return_type,  -- Function Return Type
        pg_catalog.pg_get_function_arguments(p.oid)::TEXT AS arguments,  -- Function Arguments
        CASE 
            WHEN p.prokind = 'f' THEN 'FUNCTION'
            WHEN p.prokind = 'p' THEN 'PROCEDURE'
            ELSE 'OTHER'
        END::TEXT AS object_type,  -- Object Type (Function/Procedure)
        r.rolname::TEXT AS owner,  -- Owner Name
        l.lanname::TEXT AS language,  -- Language of the Function/Procedure
        p.prosrc::TEXT AS definition,  -- Function Definition (Source Code)
        COALESCE(p.proacl::TEXT, 'NULL') AS privileges,  -- Cast `proacl` to TEXT
        pg_catalog.obj_description(p.oid, 'pg_proc')::TEXT AS description,  -- Function Description
        p.probin::TEXT AS binary_path,  -- Binary Path (if applicable)
        p.provolatile::TEXT AS volatility,  -- Function Volatility (immutable/stable/volatile)
        p.proisstrict::TEXT AS is_strict,  -- Is Function Strict?
        p.prosecdef::TEXT AS security_definer,  -- Security Definer (Executes with Owner Privileges)
        p.proparallel::TEXT AS parallel_mode,  -- Parallel Execution Mode
        -- Dynamically Include procreated and promodified if PostgreSQL version >=16
        CASE 
            WHEN (SELECT has_procreated FROM column_check) THEN NULL::TEXT
            ELSE NULL 
        END AS created_at,  -- Function Creation Time (PostgreSQL 16+)
        CASE 
            WHEN (SELECT has_procreated FROM column_check) THEN NULL::TEXT
            ELSE NULL 
        END AS last_modified_at  -- Last Modified Time (PostgreSQL 16+)
    FROM pg_proc p
    JOIN pg_namespace n ON p.pronamespace = n.oid
    JOIN pg_roles r ON p.proowner = r.oid  -- Fetch Human-Readable Owner Name
    JOIN pg_language l ON p.prolang = l.oid  -- Fetch Language Name
    WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')  -- Exclude System Schemas
),
triggers AS (
    SELECT 
        t.tgname::TEXT AS object_name,  -- Trigger Name
        n.nspname::TEXT AS schema_name,  -- Schema Name
        'N/A'::TEXT AS return_type,  -- Triggers do not have return types
        string_agg(a.attname, ', ')::TEXT AS arguments,
        'TRIGGER'::TEXT AS object_type,  -- Object Type (Trigger)
        r.rolname::TEXT AS owner,  -- Owner of the Trigger
        NULL::TEXT AS language,  -- Triggers do not have languages
        pg_get_triggerdef(t.oid)::TEXT AS definition,  -- Trigger Definition
        NULL::TEXT AS privileges,  -- Privileges (Triggers donâ€™t have this)
        pg_catalog.obj_description(t.oid, 'pg_trigger')::TEXT AS description,  -- Trigger Description
        NULL::TEXT AS binary_path,  -- No Binary Path for Triggers
        NULL::TEXT AS volatility,  -- No Volatility for Triggers
        NULL::TEXT AS is_strict,  -- No Strictness for Triggers
        NULL::TEXT AS security_definer,  -- No Security Definer for Triggers
        NULL::TEXT AS parallel_mode,  -- No Parallel Mode for Triggers
        NULL::TEXT AS created_at,  -- No Creation Date for Triggers
        NULL::TEXT AS last_modified_at  -- No Last Modified Date for Triggers
    FROM pg_trigger t
    JOIN pg_class c ON t.tgrelid = c.oid
    JOIN pg_namespace n ON c.relnamespace = n.oid
    JOIN pg_roles r ON c.relowner = r.oid  -- Fetch Human-Readable Owner Name
    LEFT JOIN pg_attribute a ON a.attrelid = c.oid AND a.attnum = ANY(t.tgattr)
    WHERE NOT t.tgisinternal  -- Exclude Internal/System Triggers
    GROUP BY t.tgname, n.nspname, c.relowner, t.oid, r.rolname
)
SELECT * FROM functions_procedures

UNION ALL
SELECT * FROM triggers
ORDER BY last_modified_at DESC NULLS LAST, created_at DESC NULLS LAST;