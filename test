const express = require('express');
const RateLimiter = require('express-rate-flexible');

const app = express();

// Object to track exceeded URLs
const exceededUrls = {};

// Configure the rate limiter for memory storage
const rateLimiter = new RateLimiter({
  store: 'memory', // Use in-memory storage
  points: 10, // Number of allowed requests per 15 minutes
  duration: 15 * 60, // Reset time in seconds (15 minutes)
  keyGenerator: (req) => req.originalUrl // Rate limit by URL, making each unique dbName path separate
});

// Apply rate limiter only to the specific endpoint /api/data/:dbName
app.get('/api/data/:dbName', (req, res, next) => {
  const key = req.originalUrl;

  rateLimiter.consume(key)
    .then((rateLimitInfo) => {
      // Remove URL from exceededUrls if it's under the limit
      if (exceededUrls[key]) {
        delete exceededUrls[key];
      }
      req.rateLimitInfo = rateLimitInfo;
      next();
    })
    .catch((rateLimitInfo) => {
      // Add URL to exceededUrls if it exceeds the rate limit
      exceededUrls[key] = rateLimitInfo;
      res.status(429).send("Too many requests, please try again later.");
    });
}, (req, res) => {
  const dbName = req.params.dbName;
  res.send(`Data for /api/data/${dbName}`);
});

// Monitoring endpoint to get rate-limit status
app.get('/api/rate-stats', (req, res) => {
  res.json({
    exceededUrls,
    monitoredUrls: Object.keys(rateLimiter._inMemoryStorage) // List of URLs currently tracked in memory
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
