const express = require('express');
const { Pool } = require('pg');

const app = express();

// Configure the PostgreSQL connection pool
const pool = new Pool({
  user: 'your_db_user',
  host: 'localhost',
  database: 'your_database_name',
  password: 'your_db_password',
  port: 5432,
  // Set pool-wide timeout for idle clients or connection creation
  idleTimeoutMillis: 10000,
  connectionTimeoutMillis: 5000,
});

const API_TIMEOUT = 15000; // 15 seconds

// Middleware to set a timeout for API requests
app.use((req, res, next) => {
  res.setTimeout(API_TIMEOUT, () => {
    res.status(504).send('Request timed out');
  });
  next();
});

// Define the endpoint to run the query
app.get('/api/logs', async (req, res) => {
  const { label, level, message } = req.query;

  let query = `SELECT database, "label" FROM logs WHERE 1=1`;
  const params = [];

  // Dynamically build the WHERE clause
  if (label) {
    query += ` AND "label" = $${params.length + 1}`;
    params.push(label);
  }
  if (level) {
    query += ` AND "level" = $${params.length + 1}`;
    params.push(level);
  }
  if (message) {
    query += ` AND message ILIKE $${params.length + 1}`;
    params.push(`%${message}%`);
  }

  query += ` GROUP BY database, "label"`;

  try {
    // Set a timeout on the database query
    const dbQueryTimeout = {
      text: query,
      values: params,
      rowMode: 'array', // Optional: Set rowMode if you need arrays instead of objects
      statement_timeout: 10000, // Set a timeout in milliseconds for this particular query (10 seconds)
    };

    const result = await pool.query(dbQueryTimeout);

    if (result.rowCount === 0) {
      return res.sendStatus(204); // No content
    }

    res.json(result.rows);
  } catch (err) {
    console.error('Database query error:', err);
    res.status(500).send('Internal server error');
  }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
