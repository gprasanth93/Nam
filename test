const express = require('express');
const { RateLimiterMemory } = require('rate-limiter-flexible');

const app = express();

// Define the rate limiter using in-memory storage
const rateLimiter = new RateLimiterMemory({
  points: 10, // Number of allowed requests per 15 minutes
  duration: 15 * 60, // Reset time in seconds (15 minutes)
  keyPrefix: 'rate-limit', // Prefix for keys in memory store
  execEvenly: false, // Immediate blocking when limits are exceeded
});

// Object to track exceeded URLs and monitored URLs
const exceededUrls = {};
const monitoredUrlsSet = new Set(); // Using a set to track monitored URLs

// Middleware to apply rate limiting to /api/data/:dbName
const rateLimitMiddleware = async (req, res, next) => {
  const key = req.originalUrl;

  try {
    const rateLimitInfo = await rateLimiter.consume(key); // Consume 1 point per request
    // Remove URL from exceededUrls if it's under the limit
    if (exceededUrls[key]) {
      delete exceededUrls[key];
    }
    // Add the key to the monitored URLs set
    monitoredUrlsSet.add(key);
    req.rateLimitInfo = rateLimitInfo;
    next();
  } catch (rateLimitInfo) {
    // Add URL to exceededUrls if it exceeds the rate limit
    exceededUrls[key] = {
      totalHits: rateLimitInfo.consumedPoints,
      resetTime: rateLimitInfo.msBeforeNext,
    };
    res.status(429).send('Too many requests, please try again later.');
  }
};

// Apply rate limiter to a specific route
app.get('/api/data/:dbName', rateLimitMiddleware, (req, res) => {
  const dbName = req.params.dbName;
  res.send(`Data for /api/data/${dbName}`);
});

// Monitoring endpoint to get rate limit status
app.get('/api/rate-stats', (req, res) => {
  res.json({
    exceededUrls,
    monitoredUrls: Array.from(monitoredUrlsSet), // Convert the set to an array for response
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
