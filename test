const express = require('express');
const rateLimit = require('express-rate-limit');

const app = express();

// In-memory object to store exceeded URLs for monitoring
const exceededUrls = {};

// Custom memory store to expose rate limit states
class CustomMemoryStore extends rateLimit.MemoryStore {
  increment(key, cb) {
    super.increment(key, (err, { total, resetTime }) => {
      // Store the URL in exceededUrls if the rate limit has been exceeded
      if (total >= 10) {
        exceededUrls[key] = {
          total,
          resetTime
        };
      } else if (exceededUrls[key] && total < 10) {
        // Remove the URL from exceededUrls once it's back within limits
        delete exceededUrls[key];
      }
      cb(err, { total, resetTime });
    });
  }

  resetAll() {
    super.resetAll();
    Object.keys(exceededUrls).forEach(key => delete exceededUrls[key]); // Clear exceededUrls on reset
  }
}

// Define a rate limiter with the custom store
const dataRateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 10, // Limit each URL to 10 requests per windowMs
  message: "Too many requests, please try again later.",
  standardHeaders: true,
  legacyHeaders: false,
  store: new CustomMemoryStore()
});

// Apply rate limiter to specific route
app.get('/api/data/:dbName', dataRateLimiter, (req, res) => {
  const dbName = req.params.dbName;
  res.send(`Data for /api/data/${dbName} endpoint.`);
});

// Endpoint to get rate limit status for exceeded URLs
app.get('/api/rate-stats', (req, res) => {
  res.json({
    exceededUrls,
    monitoredUrls: Object.keys(dataRateLimiter.store.hits) // List of all URLs currently in memory
  });
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
