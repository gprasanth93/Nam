#!/usr/bin/env node
/**
 * Usage: node socar_wrapper.js <hostPort> <targetIp> <targetPort> <databaseName> <logPath>
 *
 * Example:
 *   node socar_wrapper.js 8001 192.168.122.101 22 db1 /var/log/socar
 *
 * This script:
 *  - Listens on <hostPort>
 *  - Forwards all TCP traffic to <targetIp>:<targetPort>
 *  - Writes logs to <logPath>/socar_<hostPort>_<databaseName>_<timestamp>.log
 *  - Remains running indefinitely until killed (e.g., kill <pid>).
 */

const net = require('net');
const fs = require('fs');
const path = require('path');

// Extract CLI arguments
const [,, hostPort, targetIp, targetPort, databaseName, logPathArg] = process.argv;

if (!hostPort || !targetIp || !targetPort || !databaseName || !logPathArg) {
  console.error('Usage: node socar_wrapper.js <hostPort> <targetIp> <targetPort> <databaseName> <logPath>');
  process.exit(1);
}

// Convert numeric arguments
const localPort = parseInt(hostPort, 10);
const remotePort = parseInt(targetPort, 10);

// Ensure the log directory exists (recursive: true for nested paths)
try {
  fs.mkdirSync(logPathArg, { recursive: true });
} catch (err) {
  console.error(`Failed to create log directory "${logPathArg}":`, err);
  process.exit(1);
}

// Generate a unique log file name
const timestamp = Date.now();
const logFile = path.join(logPathArg, `socar_${hostPort}_${databaseName}_${timestamp}.log`);

// Simple helper to log to file + stdout
function log(msg) {
  const line = `[${new Date().toISOString()}] ${msg}\n`;
  fs.appendFileSync(logFile, line);
  console.log(line.trim());
}

log(`socar_wrapper.js invoked with arguments:
  hostPort=${hostPort},
  targetIp=${targetIp},
  targetPort=${targetPort},
  databaseName=${databaseName},
  logPath=${logPathArg}`);
log(`Log file: ${logFile}`);

// Create a TCP server to forward traffic
const server = net.createServer((clientSocket) => {
  log(`New inbound connection from ${clientSocket.remoteAddress}:${clientSocket.remotePort}`);

  // Connect to the remote target
  const remoteSocket = net.connect(remotePort, targetIp, () => {
    log(`Forwarding local:${localPort} -> ${targetIp}:${remotePort} (db=${databaseName})`);
  });

  // Pipe data in both directions
  clientSocket.pipe(remoteSocket).pipe(clientSocket);

  // Error handling
  clientSocket.on('error', (err) => {
    log(`Client socket error: ${err.message}`);
  });
  remoteSocket.on('error', (err) => {
    log(`Remote socket error: ${err.message}`);
  });
});

// Start listening
server.listen(localPort, '0.0.0.0', () => {
  log(`Listening on port ${localPort}, forwarding to ${targetIp}:${remotePort}, db=${databaseName}`);
});

// Keep the script alive indefinitely by virtue of the open server.
// Optionally, handle shutdown signals:
process.on('SIGINT', () => {
  log('Received SIGINT, shutting down...');
  server.close(() => {
    log('Server closed. Exiting.');
    process.exit(0);
  });
});
process.on('SIGTERM', () => {
  log('Received SIGTERM, shutting down...');
  server.close(() => {
    log('Server closed. Exiting.');
    process.exit(0);
  });
});
